import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import cv2, numpy
import numpy as np
import imutils
import random


def find_if_close(cent1, cent2):
    # https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-45.php

    ((x1, y1), r1) = cv2.minEnclosingCircle(cent1)
    ((x2, y2), r2) = cv2.minEnclosingCircle(cent2)

    M1 = cv2.moments(cent1)
    if M1["m00"] is not None:
        cX1 = int(M1["m10"] / M1["m00"])
        cY1 = int(M1["m01"] / M1["m00"])
        M1 = cv2.moments(cent1)
        cX1 = int(M1["m10"] / M1["m00"])
        cY1 = int(M1["m01"] / M1["m00"])

        import math
        # print("Input x1, y1, r1, x2, y2, r2:")
        # x1,y1,r1,x2,y2,r2 = [float(i) for i in input().split()]
        d = math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
        if d < r1 - r2:
            # print("C2  is in C1")
            return True
        elif d < r2 - r1:
            # print("C1  is in C2")
            return True
        elif d > r1 + r2:
            # print("Circumference of C1  and C2  intersect")
            return True
        else:
            # print("C1 and C2  do not overlap")
            return False


def unifyContours(cnts, draw, target):
    rand_color = (random.randint(127, 255), random.randint(127, 255), random.randint(127, 255))
    # https://dsp.stackexchange.com/questions/2564/opencv-c-connect-nearby-contours-based-on-distance-between-them
    UNIFY = True
    if UNIFY:
        LENGTH = len(cnts)
        status = np.zeros((LENGTH, 1))

        for i, cnt1 in enumerate(cnts):
            x = i
            if i != LENGTH - 1:
                for j, cnt2 in enumerate(cnts[i + 1:]):
                    x = x + 1
                    dist = find_if_close(cnt1, cnt2)
                    if dist == True:
                        val = min(status[i], status[x])
                        status[x] = status[i] = val
                    else:
                        if status[x] == status[i]:
                            status[x] = i + 1

        unified = []
        maximum = int(status.max()) + 1
        for i in range(maximum):
            pos = np.where(status == i)[0]
            if pos.size != 0:
                cont = np.vstack(cnts[i] for i in pos)
                if cont.any():
                    hull = cv2.convexHull(cont)
                    unified.append(hull)

        if (draw):  # DRAW_OPTIMIZED_CONTOURS
            cv2.drawContours(target, unified, -1, rand_color, 4)
        return unified


def get_filter_img(target, circles_array):
    DEBUG = False
    VISOAR = False
    mymedian = 0
    mymean = 0
    mymax = 0
    mymin = 0
    circles_array = []
    USE_OPENING = False
    target = (target*255)
    output = target.copy()
    gray = cv2.cvtColor(target, cv2.COLOR_RGB2GRAY)
    valid, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    if (USE_OPENING):
        # noise removal
        kernel = np.ones((3, 3), np.uint8)
        opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=2)
        if DEBUG:
            cv2.imwrite('061019_01morph.png', opening)
        # sure background area
        sure_bg = cv2.dilate(opening, kernel, iterations=3)
        if DEBUG:
            cv2.imwrite('061019_02sure_bg.png', sure_bg)
    else:
        opening = thresh
        sure_bg = thresh

    # Finding sure foreground area
    # opening = getIntImg(opening)
    dist_transform = cv2.distanceTransform(opening, cv2.DIST_L2, 5)
    ret, sure_fg = cv2.threshold(dist_transform, 0.1 * dist_transform.max(), 255, 0)

    # Finding unknown region
    sure_fg = np.uint8(sure_fg)
    if DEBUG:
        cv2.imwrite('061019_03sure_fg.png', sure_fg)

    unknown = cv2.subtract(sure_bg, sure_fg)
    if DEBUG:
        cv2.imwrite('061019_04unknown.png', unknown)

    # Marker labelling
    ret, markers = cv2.connectedComponents(sure_fg)

    # Add one to all labels so that sure background is not 0, but 1
    markers = markers + 1

    # Now, mark the region of unknown with zero
    markers[unknown == 255] = 0
    markers = markers.astype('int32')
    markers = cv2.watershed(target, markers)
    target[markers == -1] = [255, 0, 0]
    # return valid, target

    if DEBUG:
        cv2.imwrite('061019_05countimg.png', target)

    print("[INFO] {} unique segments found".format(len(np.unique(markers)) - 1))
    # https://www.pyimagesearch.com/2015/11/02/watershed-opencv/
    labels = markers

    height, width = gray.shape[:2]
    min_width = min(width, height)
    margin = min_width - (min_width * .2)
    print('Will be removing item of radius ' + str(margin))

    circlesOnlyMask = np.zeros((height, width, 3), np.uint8)

    # print(labels)
    DRAW_ALL_CONTOURS = False
    DRAW_ENCLOSING_CIRCLE = True
    DRAW_MOMENTS = False
    DRAW_OPTIMIZED_CONTOURS = True
    all_unified = []
    for label in np.unique(labels):
        # if the label is zero, we are examining the 'background'
        # so simply ignore it
        if label == 0:
            continue

        # otherwise, allocate memory for the label region and draw
        # it on the mask
        mask = np.zeros(gray.shape, dtype="uint8")
        mask[labels == label] = 255

        # detect contours in the mask and grab the largest one
        cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL,
                                cv2.CHAIN_APPROX_SIMPLE)
        cnts = imutils.grab_contours(cnts)
        c = max(cnts, key=cv2.contourArea)

        FONT_SCALE = 5
        FONT_THICKNESS = 2
        text_to_write = '*'  # "*{}".format(label)
        USE_CIRCLE = False
        rand_color = (random.randint(127, 255), random.randint(127, 255), random.randint(127, 255))
        ((x, y), r) = cv2.minEnclosingCircle(c)
        if (r < margin):
            circles_array.append(r)
            # draw a circle enclosing the object
            if DRAW_ENCLOSING_CIRCLE:
                print('Drawing Enclosing circle')
                cv2.circle(target, (int(x), int(y)), int(r), rand_color, 2)
                cv2.putText(target, text_to_write,
                            (int(x) - 10, int(y)),
                            cv2.FONT_HERSHEY_SIMPLEX, FONT_SCALE, rand_color, FONT_THICKNESS)
                # if (r>10):
                # 	r = r/2;
                # cv2.circle(circlesOnlyMask,  (int(x), int(y)), int(r), (125, 125, 125), -1)
            centroids = []
            if DRAW_MOMENTS:
                print('Drawing Moments')
                # for ceach in cnts:
                ceach = c
                # compute the center of the contour
                M = cv2.moments(ceach)
                if M["m00"] is not None:
                    cX = int(M["m10"] / M["m00"])
                    cY = int(M["m01"] / M["m00"])
                    centroids.append((cX, cY, x, y, r))

                    # draw the contour and center of the shape on the image
                    cv2.drawContours(target, [ceach], -1, rand_color, 2)
                    cv2.circle(target, (cX, cY), 7, rand_color, -1)
                    # cv2.putText(target, "center", (cX - 20, cY - 20), cv2.FONT_HERSHEY_SIMPLEX, FONT_SCALE, (255, 255, 255), FONT_THICKNESS)

            unifyContours(cnts, draw=True, target=target)
        else:
            print('removing item of radius ' + str(r))

    #	all_unified.append(self.unifyContours(cnts, draw=False, target=target))
    # self.unifyContours(all_unified, draw=True, target=target)
    # cv2.drawContours(thresh,unified,-1,255,-1)
    if circles_array:
        mymedian = np.median(circles_array)
        # print ( 'Mean: ')
        mymean = np.mean(circles_array)
        # print ( 'Max: ')
        mymax = np.max(circles_array)
        # print ( 'Min: ')
        mymin = np.min(circles_array)
        print('Median: {0} Mean: {1} [{2}, {3}]'.format(mymedian, mymean, mymax, mymin))

    # cv2.imwrite('00_circlesOnlyMask.png',circlesOnlyMask)
    # circlesGray = cv2.cvtColor(circlesOnlyMask,cv2.COLOR_RGB2GRAY)
    # cv2.imwrite('01_circlesGray.png',circlesGray)
    # th, circlesGrayThresh = cv2.threshold(circlesGray, 0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)
    # cv2.imwrite('02_circlesGrayThresh.png',circlesGrayThresh)

    # #peaks8u = cv2.convertScaleAbs(peaks)
    # contours, hierarchy = cv2.findContours(circlesOnlyMask, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_SIMPLE)
    # cv2.drawContours(gray, contours, -1, (255,255,0), 3)

    # circles = cv2.HoughCircles(circlesGrayThresh,  cv2.HOUGH_GRADIENT, 1.2, 10)
    # # ensure at least some circles were found
    # if circles is not None:
    # 	# convert the (x, y) coordinates and radius of the circles to integers
    # 	circles = np.round(circles[0, :]).astype("int")

    # 	# loop over the (x, y) coordinates and radius of the circles
    # 	for (x, y, r) in circles:
    # 		# draw the circle in the output image, then draw a rectangle
    # 		# corresponding to the center of the circle
    # 		cv2.circle(output, (x, y), r, (255, 255, 0), 4)
    # 		cv2.rectangle(output, (x - 5, y - 5), (x + 5, y + 5), (0, 128, 255), -1)
    # else:
    # 	print('No Hough Circles')
    # contours, hierarchy = cv2.findContours(circlesGrayThresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    # cv2.drawContours(output, contours, -1, (0,255,0), 3)

    cv2.imwrite('03_output.png', output)

    return valid, target
    # return valid, circlesOnlyMask
    # return valid, circlesGray
    # return valid, gray


def get_TGI(img):
    red = img[:, :, 0]
    green = img[:, :, 1]
    blue = img[:, :, 2]

    # #TGI â€“ Triangular Greenness Index - RGB index for chlorophyll sensitivity. TGI index relies on reflectance values at visible wavelengths. It #is a fairly good proxy for chlorophyll content in areas of high leaf cover.
    # #TGI = âˆ’0.5 * ((190 * (redData âˆ’ greeData)) âˆ’ (120*(redData âˆ’ blueData)))
    scaleRed = (0.39 * red)
    scaleBlue = (.61 * blue)
    TGI = green - scaleRed - scaleBlue
    TGI = cv2.normalize(TGI, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)  # normalize data [0,1]

    gray = TGI
    # if VISOAR:
    cdict = [(.56, .019, .019), (.286, .14, .008),(.94, .83, 0),(.2, .4, 0), (.2, .4, 0)   ]
    # else:
    #     cdict = [(.2, .4, 0), (.2, .4, 0), (.94, .83, 0), (.286, .14, .008), (.56, .019, .019)]
    cmap = mpl.colors.LinearSegmentedColormap.from_list(name='my_colormap', colors=cdict, N=1000)
    out = cmap(gray)
    # if VISOAR == False:
    #     cv2.imshow('TGI', out)
    return out


#if VISOAR:
    # COnvert ViSUS array to numpy
# pdim = input.dims.getPointDim()
# img = Array.toNumPy(input, bShareMem=True)
img = input.astype(numpy.float32)
#elif options.file:
#    img = cv2.imread(os.path.abspath(options.file))
# else:
#     img = cv2.imread('/Users/amygooch/GIT/SCI/DATA/FromDale/ag1/VisusSlamFiles/AG1IDX/AG1_20200629_161836.png')

    #img = cv2.imread('/Users/amygooch/GIT/ViSUS/SLAM/SLAM_AMY/VisusSlam/Filter_GUI/WeedsNoMark.png')

out = get_TGI(img)

# thresh = get_threshold(out)

circles_array = []

# This is the most important line.. getting input converted so CV can use it!
out = cv2.cvtColor(np.float32(out), cv2.COLOR_RGB2BGR)

# OpenCV processing to filter and count
valid, imgfile = get_filter_img(out, circles_array)
# if VISOAR:
#output = Array.fromNumPy(imgfile, TargetDim=pdim)
output = imgfile

# else:
#     cv2.imshow('imgfile', imgfile)
#     cv2.waitKey(0)
#     cv2.destroyAllWindows()

